generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id             Int           @id @default(autoincrement())
  name           String
  slug           String        @unique
  show_in_header Boolean       @default(true)
  subcategories  Subcategory[]
  articles       Article[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Subcategory {
  id             Int       @id @default(autoincrement())
  name           String
  slug           String    @unique
  show_in_header Boolean   @default(true)
  is_highlighted Boolean   @default(false)
  category       Category  @relation(fields: [categoryId], references: [id])
  categoryId     Int
  articles       Article[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Tag {
  id             Int              @id @default(autoincrement())
  name           String
  slug           String           @unique
  is_highlighted Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  articles       ArticlesOnTags[]
}

model NewsType {
  id        Int       @id @default(autoincrement())
  name      String
  slug      String    @unique
  articles  Article[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Article {
  id             Int              @id @default(autoincrement())
  title          String
  slug           String           @unique
  content        String
  excerpt        String?
  featured_image String?
  viewCount      Int              @default(0)
  is_breaking    Boolean          @default(false)
  is_highlighted Boolean          @default(false)
  published_at   DateTime?
  category       Category         @relation(fields: [categoryId], references: [id])
  categoryId     Int
  subcategory    Subcategory      @relation(fields: [subcategoryId], references: [id])
  subcategoryId  Int
  news_type      NewsType         @relation(fields: [newsTypeId], references: [id])
  newsTypeId     Int
  tags           ArticlesOnTags[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model ArticlesOnTags {
  article    Article  @relation(fields: [articleId], references: [id])
  articleId  Int
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      Int
  assignedAt DateTime @default(now())

  @@id([articleId, tagId])
}

model AdminSession {
  id        String   @id @default(cuid())
  email     String
  expires   DateTime
  createdAt DateTime @default(now())
}

model Poll {
  id        Int          @id @default(autoincrement())
  question  String
  category  String
  status    String       @default("draft") // draft, active, ended
  featured  Boolean      @default(false)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  expiresAt DateTime?
  options   PollOption[]
}

model PollOption {
  id     Int    @id @default(autoincrement())
  text   String
  votes  Int    @default(0)
  pollId Int
  poll   Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)
}
